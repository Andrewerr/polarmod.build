INFILE="/root/external/PolarHosts/hosts.base"
OUTFILE_REAL="system/core/rootdir/etc/hosts"
BUILD_OUT_DIR="out_dir/"
DROIDBUILD_SEARCH_DIRS=("external/")
DROIDDIR=$(pwd)

export PATH="$PATH:/root/bin/:/root/sakura/build/make/tools/bin/"
export buildtype="userdebug"

include "droidbuild/hosts.sh"
include "droidbuild/generic.sh"

target_sync-initial(){
   exec git config --global user.email "p01ar@p01ar.net"
   exec git config --global user.name "Andrewerr"
   exec "mkdir -p /root/sakura/.repo/local_manifests/"
   exec "cp /root/manifests/* .repo/local_manifests/"
   exec "/root/bin/repo init --depth=1 -u git://github.com/ProjectSakura/android.git -b 11 && repo sync --current-branch --force-sync --no-clone-bundle --no-tags --optimized-fetch --prune -j 6" 
   success "Sync successful"
   info "Copying local vendor Polar"
   exec "cp -r /root/polar vendor/polar"
   success "Succesfully synchronized local vendors"
}


target_clean-patch(){
  info "Cleaning up patched repos"
  exec "rm -rf vendor/lineage"
  exec "rm -rf build/core"
  success "Done cleaning up"
}

target_clean-soft(){
  info "Cleaning local changes"
  target_clean-patch
}


target_arm(){
  info "Patching libraries for arm32"
  info "external/faceunlock"
  exec rm -rf external/faceunlock
  exec cp -r ~/faceunlock32 external/faceunlock
  success "external/faceunlock patched"
}

target_aarch(){
  require_command git
  info "Patching libraries for aarch64"
  info "external/faceunlock"
  exec rm -rf external/faceunlock
  change_dir external
  exec git clone https://gitlab.com/LordShen/external_faceunlock
  exec mv external_faceunlock faceunlock
  success "external/faceunlock"
  leave_dir
  success "Succesfully patched libraries for aarch64"
}

target_z3tc(){
  export devname="z3tc"
  export buildtype="userdebug"
  export keys="test-keys"
  target_env
  target_arm
  print_info
  target_clean
  target_cat1 
  target_any-unsigned
}


target_z3tc-local-eng(){
  export devname="z3tc"
  target_clean
  target_cat1
  exec ". build/envsetup.sh && lunch lineage_z3tc-eng && mka bacon -j6"
}

target_hotdogg-local(){
  export devname="hotdogg"
  target_clean
  target_cat1
  exec ". build/envsetup.sh && lunch lineage_hotdogg-userdebug && mka bacon -j6"
}

target_hotdogg-syncd(){
  export devname="hotdogg"
  target_env
  export keys="test-keys"
  exec "repo sync"
  target_hotdogg-local
}

target_hotdogg-signed(){
  export buildtype="user"
  export devname="hotdogg"
  target_env
  export keys="release-keys"
  previous_target_files=$(get_latest_file "*hotdogg*signed-target_files*" "${out_dir}")
  target_name="PolarMod-Sakura-${signature}.${keys}"
  print_info 
  info "Updating sigining keys..."
  #exec rm -rf ~/.android-certs
  exec cp -r ~/.android-certs .android-certs
  success "Updated signing keys"
  info "Assumming everything is patched for bootloader being locked"
  info "Use 'patch' target if you would like to perform patching first" #TODO: patch target
  info "Starting build"
  exec ". build/envsetup.sh"
  exec "lunch lineage_hotdogg-${buildtype}"
  export TARGET_USER_BLUR=true
  export EXTRA_FOD_ANIMATIONS=true
  exec "mka target-files-package dist otatools -j8"
  success "Built target files package succesfully"
  info "Preparing enviroment for signing"
  target_signing
  info "Signing files"
  exec "./build/tools/releasetools/sign_target_files_apks -o -d ~/.android-certs $OUT/obj/PACKAGING/target_files_intermediates/*-target_files-*.zip ${out_dir}/${target_name}-signed-target_files.zip"
  success "Signed files succesfully"
  info "Building full OTA"
  exec "./build/tools/releasetools/ota_from_target_files --skip_compatibility_check -v -k ~/.android-certs/releasekey --block ${out_dir}/${target_name}-signed-target_files.zip ${out_dir}/${target_name}-OTA-signed.zip"
  success "Succesfully built full OTA!"
  if [[ -f $previous_target_files ]]; then
    info "Building incremental OTA"
    exec "./build/tools/releasetools/ota_from_target_files --skip_compatibility_check -v -k ~/.android-certs/releasekey --block -i ${previous_target_files} ${out_dir}/${target_name}-signed-target_files.zip ${out_dir}/${target_name}-INCREMENTAL-OTA-signed.zip"
  fi
}


target_gta4xlwifi-signed(){
  export buildtype="eng"
  export devname="gta4xlwifi"
  target_any-signed
}

target_hotdogg-local-user-signed(){
  export buildtype="user"
  target_hotdogg-signed
}

target_clean(){
  exec rm -rf $OUTFILE_REAL
}

target_env(){
  export out_dir=$BUILD_OUT_DIR
  require_directory $out_dir
  export keys="test-keys"
  datetime=`date '+%Y%m%d_%H%M%S'`
  export signature="${devname}-${datetime}-${buildtype}"
  export BUILD_DISPLAY_ID="${devname}-${datetime}-${buildtype}-${BUILD_ID}"
}


target_hotdogg(){
  target_aarch
  target_patch-bootloader
  target_hotdogg-local-user-signed
}

target_emulator(){
  info "Building emulator package"
  exec "source build/envsetup.sh"
  exec "lunch lineage_x86_64-eng"
  exec "mka sdk_addon -j8"
  success "Built emulator package"
}

target_all(){
  target_clean-patch
  target_sync-initial
  target_droidbuild
  target_cat1
  target_patch
  target_z3tc
  target_hotdogg
  target_emulator
}

include "droidbuild/aux.sh"

target_droidbuild(){
    info "Collecting and running Droidbuild modules"
    # Include droid build files
    glob_files "**/Droidbuild.sh" $dir files
    for file in ${files[@]}; do
        TARGET_NAME="$1"
        LOCAL_PATH="$(pwd)/$(dirname $file)"
        info "Including $file"
        include $file
        droidbuild_module
    done
}
