BUILD_OUT_DIR="$BASEDIR/out_dir/"
DROIDDIR=$(pwd)

export PATH="$PATH:/root/bin/:$BASEDIR/build/make/tools/bin/"

include "droidbuild/keys.sh"
include "droidbuild/generic.sh"
include_if_exists "$BASEDIR/config.sh"

target_sync-initial(){
   exec git config --global user.email "$GIT_EMAIL"
   exec git config --global user.name "$GIT_USERNAME"
   exec "mkdir -p $BASEDIR/.repo/local_manifests/"
   exec "cp /root/manifests/* .repo/local_manifests/"
   if ndef CONFIG_NPROC; then
     warn "Setting number of threads automatically"
     CONFIG_NPROC=`nproc`
   fi
   if ndef BASE_REPO; then
     error "BASE_REPO is not defined!"
     error "Aborting sync"
     exit -1
   fi
   if ndef BASE_REPO_BRANCH; then
     error "BASE_REPO_BRANCH is not defined!"
     error "Aborting sync"
     exit -1
   fi
   exec "/root/bin/repo init --depth=1 -u $BASE_REPO -b $BASE_REPO_BRANCH && repo sync --current-branch --force-sync --no-clone-bundle --no-tags --optimized-fetch --prune -j $CONFIG_NPROC" 
   success "Sync successful"
}

target_env(){
  export out_dir=$BUILD_OUT_DIR
  require_directory $out_dir
  datetime=`date '+%Y%m%d_%H%M%S'`
  export signature="${TARGE_CODENAME}-${datetime}-${TARGET_BUILDTYPE}"
  export BUILD_DISPLAY_ID="${TARGET_CODENAME}-${datetime}-${TARGET_BUILDTYPE}-${BUILD_ID}"
}

target_build-device(){
  target_env  
  require_command nproc
  if $TARGET_NEEDS_RESYNC; then
    info "Target requires to resync sources"
    info "Updating local manifests"
    exec "rm -rf $BASEDIR/.repo/local_manifests/*.xml"
    for file in ${TARGET_LOCAL_MANIFESTS[@]}; do
      exec "cp ${file} $BASEDIR/.repo/local_manifests/"
    done
    target_sync-initial
  fi
  # Device configuration is fully ready
  # As device may use droidbuild modules other
  # then its' specification we should update all modules
  # once more
  droidbuild
  # Now remove directories that must not exist when building
  # currrent target
  info "Removing directories that must not exist for current target"
  for dir in ${TARGET_REMOVE_DIRS[@]}; do
    exec "rm -rf $dir"
  done
  # The configuration is done by calling droidbuild
  # Now we need to re-include files and call droidbuild
  info $DROIDBUILD_MODULES
  for LOCAL_PATH in ${DROIDBUILD_MODULES[@]}; do
    include $LOCAL_PATH/Droidbuild.sh
    # Call droidbuild modules  
    droidbuild_module
  done
  # Set threads count for AOSP buildsystem
  if ndef CONFIG_NPROC; then
    warn "Setting number of thread automatically"
    CONFIG_NPROC=`nproc`
  fi
  info "Will build with $CONFIG_NPROC threads"
  # Now we are ready for build 
  if $TARGET_SIGNED_BUILD; then
    target_build-device-signed
  else
    target_build-device-unsigned
  fi
  success "Build completed"
  # Clean-up directories used by target, so they would not conflict with subsequent targets
  for dir in ${TARGET_USE_DIRS[@]}; do
    exec "rm -rf ${dir}"
  done
  success "Cleaned-up after build"
}

target_droid(){
  # Specifies device list
  # Synchronize first
  target_sync-initial # <-- droidbuild_devvice_* repos MUST BE synchornized here
  # Build each device
  # FIXME: Separate device list
  droidbuild  
  target_z3tc
}
include "droidbuild/aux.sh"

DROIDBUILD_MODULES=()

droidbuild(){
    info "Collecting Droidbuild modules"
    # Reset module list
    DROIDBUILD_MODULES=()  
    # Include droid build files
    glob_files "**/Droidbuild.sh" $BASEDIR files
    info $files
    for file in ${files[@]}; do
        TARGET_NAME="$1"
        LOCAL_PATH="$(dirname $file)"
        info "Including $file"
#        info "LOCAL_PATH=$LOCAL_PATH"
        DROIDBUILD_MODULES+=($LOCAL_PATH)
	info $DROIDBUILD_MODULES
        include $file
    done
}

include droidbuild/build_vars.sh

