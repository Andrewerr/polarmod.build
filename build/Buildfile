# Meta
version="1.2-rc3-magika"
# Banner
include "droidbuild/banner.sh"
# Droidbuild variables
DROIDDIR=$(pwd)
DROID_TARGETS=()

# Update $PATH
export PATH="$PATH:/opt/droid/bin/:$BASEDIR/build/make/tools/bin/"

version_codename="magika"

include "droidbuild/target.sh"
include "droidbuild/keys.sh"
include "droidbuild/generic.sh"
include "droidbuild/hooks.sh"
include "droidbuild/meta.sh"

include "$DROIDBUILD_CONFIGDIR/config.sh"

if ndef NO_REMOVE_MANIFESTS; then
    export NO_REMOVE_MANIFESTS=0
    info "Setting NO_REMOVE_MANIFSTS to 0 by default"
fi

if [[ $NO_REMOVE_MANIFESTS -ne 0 ]]; then
    warn "You have setted NO_REMOVE_MANIFESTS to non-zero value."
    warn "This may lead to conflicts when building for multiple devices"
    warn "Avoid building for several devices without cleaning up manifests"
fi

target_sync-initial(){
   exec git config --global user.email "$GIT_EMAIL"
   exec git config --global user.name "$GIT_USERNAME"
   if ndef CONFIG_NPROC; then
     warn "Setting number of threads automatically"
     CONFIG_NPROC=`nproc`
   fi
   if ndef BASE_REPO; then
     error "BASE_REPO is not defined!"
     error "Aborting sync"
     exit -1
   fi
   if ndef BASE_REPO_BRANCH; then
     error "BASE_REPO_BRANCH is not defined!"
     error "Aborting sync"
     exit -1
   fi
   info "Updating manifests"
   exec "cp -r $DROIDPAK_DIR/.repo/local_manifests/* $DROIDDIR/.repo/local_manifests/"
   success "Successfully updated manifests"
   exec "repo init --depth=1 -u $BASE_REPO -b $BASE_REPO_BRANCH"
   exec "repo sync --current-branch --force-sync --no-clone-bundle --no-tags --optimized-fetch --prune -j $CONFIG_NPROC" 
   success "Sync successful"
}

target_env(){
  export out_dir=$DROIDBUILD_OUT_DIR
  require_directory $out_dir
  datetime=`date '+%Y%m%d_%H%M%S'`
  export signature="${TARGET_CODENAME}-${datetime}-${TARGET_BUILDTYPE}"
  export BUILD_DISPLAY_ID="${TARGET_CODENAME}-${datetime}-${TARGET_BUILDTYPE}-${TARGET_KEYS}"
}

target_droidbuild(){
  leave_dir
  droidbuild
  info "Modules found are ${DROIDBUILD_MODULE[@]}"
  declare -a DROIDBUILD_POSTRUN_MODULES=()
  for LOCAL_PATH in ${DROIDBUILD_MODULES[@]}; do
      info "Executing module $LOCAL_PATH"
      include $LOCAL_PATH/Droidbuild.sh
      droidbuild_module
      leave_dir
  done
  for LOCAL_PATH in ${DROIDBUILD_MODULES[@]}; do
      info "Post-running module $LOCAL_PATH"
      include $LOCAL_PATH/Droidbuild.sh
      droidbuild_postrun
      sundef_fn droidbuild_postrun
  done
}


target_build-device(){
  target_env  
  require_command nproc
  if $TARGET_NEEDS_RESYNC; then
    info "Target requires to resync sources"
    info "Updating local manifests"
    if [[ $NO_REMOVE_MANIFESTS -eq 0 ]]; then
        exec "rm -rf $BASEDIR/.repo/local_manifests/*.xml"
    fi
    for file in ${TARGET_LOCAL_MANIFESTS[@]}; do
      exec "cp ${file} $BASEDIR/.repo/local_manifests/"
    done
    target_sync-initial
  fi
  # Now remove directories that must not exist when building
  # currrent target
  info "Removing directories that must not exist for current target"
  for dir in ${TARGET_REMOVE_DIRS[@]}; do
    exec "rm -rf $dir"
  done
  # The configuration is done by calling droidbuild
  # Now we need to re-include files and call droidbuild
  target_droidbuild
  # Set threads count for AOSP buildsystem
  if ndef CONFIG_NPROC; then
    warn "Setting number of thread automatically"
    CONFIG_NPROC=`nproc`
  fi
  info "Will build with $CONFIG_NPROC threads"
  # Now we are ready for build
  leave_dir
  if $TARGET_SIGNED_BUILD; then
    info "Calling signed build"
    target_build-device-signed
  else
    target_build-device-unsigned
  fi
  success "Build completed"
  # Clean-up directories used by target, so they would not conflict with subsequent targets
  for dir in ${TARGET_USE_DIRS[@]}; do
    exec "rm -rf ${dir}"
  done
  success "Cleaned-up after build"
}

target_build-emulator(){
  target_env
  require_command nproc
  if $TARGET_NEEDS_RESYNC; then
    info "Target requires to resync sources"
    info "Updating local manifests"
    if [[ $NO_REMOVE_MANIFESTS -eq 0 ]]; then
        exec "rm -rf $BASEDIR/.repo/local_manifests/*.xml"
    fi
    for file in ${TARGET_LOCAL_MANIFESTS[@]}; do
      exec "cp ${file} $BASEDIR/.repo/local_manifests/"
    done
    target_sync-initial
  fi
  # Now remove directories that must not exist when building
  # currrent target
  info "Removing directories that must not exist for current target"
  for dir in ${TARGET_REMOVE_DIRS[@]}; do
    exec "rm -rf $dir"
  done
  # The configuration is done by calling droidbuild
  # Now we need to re-include files and call droidbuild
  target_droidbuild
  # Set threads count for AOSP buildsystem
  if ndef CONFIG_NPROC; then
    warn "Setting number of threads automatically"
    CONFIG_NPROC=`nproc`
  fi
  info "Will build with $CONFIG_NPROC threads"
  # Now we are ready for build
  leave_dir
  target_build-emulator-generic
  success "Build completed"
  # Clean-up directories used by target, so they would not conflict with subsequent targets
  for dir in ${TARGET_USE_DIRS[@]}; do
    exec "rm -rf ${dir}"
  done
  success "Cleaned-up after build"
}


target_droid(){
  # Specifies device list
  # Synchronize first
  target_sync-initial # <-- droidbuild_device_* repos MUST BE synchornized here
  # Reset DROID_TARGETS
  DROID_TARGETS=()
  # Update modules
  droidbuild
  # Print build sequence
  info "Build sequence"
  for name in "${DROID_TARGETS[@]}"; do
      info "   - $name"
  done
  for name in "${DROID_TARGETS[@]}"; do
    info "Building target $name"
    eval "target_$name"
  done
}
include "droidbuild/aux.sh"

DROIDBUILD_MODULES=()

droidbuild(){
    info "Collecting Droidbuild modules"
    # Reset module list
    DROIDBUILD_MODULES=()  
    # Include droid build files
    glob_files "**/Droidbuild.sh" $BASEDIR files
    for file in ${files[@]}; do
        TARGET_NAME="$1"
        LOCAL_PATH="$(dirname $file)"
        info "Including $file"
#        info "LOCAL_PATH=$LOCAL_PATH"
        DROIDBUILD_MODULES+=($LOCAL_PATH)
        include $file
    done
}


include droidbuild/build_vars.sh

# When this file is loaded
# call droidbuild function
# in order to collect available 
# targets, so they would be 
# available for external calling
droidbuild

