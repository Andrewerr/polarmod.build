INFILE="/root/external/PolarHosts/hosts.base"
OUTFILE_REAL="system/core/rootdir/etc/hosts"
BUILD_OUT_DIR="out_dir/"

export PATH="$PATH:/root/bin/:/root/sakura/build/make/tools/bin/"
export buildtype="userdebug"

target_sync-initial(){
   exec git config --global user.email "p01ar@p01ar.net"
   exec git config --global user.name "Andrewerr"
   exec "/root/bin/repo init --depth=1 -u git://github.com/ProjectSakura/android.git -b 11 && repo sync --current-branch --force-sync --no-clone-bundle --no-tags --optimized-fetch --prune -j 6" 
   exec "mv ~/manifests/* .repo/local_manifests"
   success "Sync successful"
   info "Copying local vendor Polar"
   exec "cp -r /root/polar vendor/polar"
   success "Succesfully synchronized local vendors"
}

dl_hosts(){
  info "Downloading and extracting $2 hosts..."
  exec rm -rf /tmp/hosts
  exec wget -q -O /tmp/hosts $1
  exec "cat /tmp/hosts >> $OUTFILE"
  success "Downloaded and extracted $2 hosts"
}

target_patch(){
  GITHUB="https://github.com/PolarMod"
  require_command git
  info "Patching packages"
  exec rm -rf system/update_engine
  exec rm -rf frameworks/base
  exec rm -rf bootable/recovery
  info "Updating packages from PolarMod"
  change_dir /tmp
  exec git clone "$GITHUB/system_update_engine"
  exec git clone "$GITHUB/frameworks_base"
  exec git clone "$GITHUB/android_bootable_recovery"
  info "Replacing packages with patched ones"
  exec mv system_update_engine $BASEDIR/system/update_engine
  exec mv frameworks_base $BASEDIR/frameworks/base
  exec mv android_bootable_recovery $BASEDIR/bootable/recovery
  success "Patched basic repositories"
  leave_dir
  info "Patching prebuilts"
  exec rm -rf prebuilts/prebuiltapks
  exec cp -r ~/polar/prebuilts prebuilts/prebuiltapks
  success "Succesfully patched prebuilts"
  info "Patching NetworkStack overlay"
  exec rm -f vendor/lineage/overlay/common/packages/modules/NetworkStack/res/values/config.xml
  exec cp ~/overlays/networkstack_config.xml vendor/lineage/overlay/common/packages/modules/NetworkStack/res/values/config.xml
  success "Patched NetworkStack overlay"
  info "Patching PRODUCT_PACKAGES"
  change_dir vendor/lineage
  exec patch config/common.mk ~/patches/common.mk.patch
  success "Succesfully patched PRODUCT_PACKAGES"
}

target_arm(){
  info "Patching libraries for arm32"
  info "external/faceunlock"
  exec rm -rf external/faceunlock
  exec cp -r ~/faceunlock32 external/faceunlock
  success "external/faceunlock patched"
}

target_aarch(){
  require_command git
  info "Patching libraries for aarch64"
  info "external/faceunlock"
  exec rm -rf external/faceunlock
  change_dir external
  exec git clone https://gitlab.com/LordShen/external_faceunlock
  exec mv external_faceunlock faceunlock
  success "external/faceunlock"
  leave_dir
  success "Succesfully patched libraries for aarch64"
}

target_patch-bootloader(){
  require_command sed
  require_command patch
  info "Patching bootloader locking support"
  info "Patching sm8150-common"
  change_dir device/oneplus/sm8150-common
  exec "sed -i 's/^BOARD_AVB_MAKE_VBMETA_IMAGE_ARGS += --flags 2/#BOARD_AVB_MAKE_VBMETA_IMAGE_ARGS += --flags 2/' BoardConfigCommon.mk"
  exec "sed -i 's/^BOARD_AVB_MAKE_VBMETA_IMAGE_ARGS += --set_hashtree_disabled_flag/#BOARD_AVB_MAKE_VBMETA_IMAGE_ARGS += --set_hashtree_disabled_flag/' BoardConfigCommon.mk"
  exec "sed -i 's/^BOARD_AVB_VBMETA_SYSTEM_KEY_PATH := external\/avb\/test\/data\/testkey_rsa2048.pem/BOARD_AVB_KEY_PATH := \/root\/.android-certs\/releasekey.key/' BoardConfigCommon.mk"
  exec "sed -i 's/^# OMX/# OEM Unlock reporting\nPRODUCT_DEFAULT_PROPERTY_OVERRIDES += \\\n    ro.oem_unlock_supported=1\n\n# OMX/' common.mk"
  success "Patched sm8150-common succesfully"
  leave_dir
  info "Patching core buildsystem"
  change_dir build/core
  exec patch Makefile ~/patches/core-Makefile-fix-18.1.patch
  leave_dir
  success "Succesfully patched bootloader locking support"
}

target_cat2(){
  info "Building CAT-II hosts"
  OUTFILE="/tmp/hosts_cat2"
  exec rm -rf $OUTFILE
  exec cp $INFILE $OUTFILE
  dl_hosts "https://raw.githubusercontent.com/StevenBlack/hosts/master/data/StevenBlack/hosts" "StevenBlack's"
  dl_hosts "https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.2o7Net/hosts" "FadeMind's"
  dl_hosts "https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Risk/hosts" "add.Risk"
  dl_hosts "https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Spam/hosts" "add.Spam"
  dl_hosts "https://raw.githubusercontent.com/shreyasminocha/shady-hosts/main/hosts" 'shady_hosts'
  dl_hosts "https://raw.githubusercontent.com/tiuxo/hosts/master/ads" "tiuxo's ads"
  dl_hosts "https://www.github.developerdan.com/hosts/lists/ads-and-tracking-extended.txt" "Ads extended"
  dl_hosts "https://www.github.developerdan.com/hosts/lists/dating-services-extended.txt" "Dating extended"
}

target_cat1(){
  target_cat2
  exec cp $OUTFILE $OUTFILE_REAL
  OUTFILE=$OUTFILE_REAL
  dl_hosts "https://www.github.developerdan.com/hosts/lists/facebook-extended.txt" "FaceBook extended"
  dl_hosts "https://www.github.developerdan.com/hosts/lists/amp-hosts-extended.txt" "AMP Hosts"
  dl_hosts "https://www.github.developerdan.com/hosts/lists/hate-and-junk-extended.txt" "Hate&Junk"
  dl_hosts "https://www.github.developerdan.com/hosts/lists/tracking-aggressive-extended.txt" "Tracking agressive"
}

target_z3tc-local(){
  export devname="z3tc"
  target_clean
  target_cat1
  exec ". build/envsetup.sh && lunch lineage_z3tc-userdebug && mka bacon -j6"
}

target_z3tc(){
  export devname="z3tc"
  export keys="test-keys"
  target_env
  target_arm
  print_info
  target_clean
  target_cat1 
  exec ". build/envsetup.sh && lunch lineage_z3tc-userdebug && mka bacon -j6"
}

target_u3aplus4g(){
  export devname="u3aplus4g"
  export keys="test-keys"
  info "Calling sync"
  #target_sync-initial
  #target_patch
  print_info
  target_clean
  target_cat2 
  exec "cp /tmp/hosts_cat2 system/core/rootdir/etc/hosts"
  exec ". build/envsetup.sh && lunch lineage_u3aplus4g-userdebug && mka bacon -j6"
}

target_z3tc-local-eng(){
  export devname="z3tc"
  target_clean
  target_cat1
  exec ". build/envsetup.sh && lunch lineage_z3tc-eng && mka bacon -j6"
}

target_hotdogg-local(){
  export devname="hotdogg"
  target_clean
  target_cat1
  exec ". build/envsetup.sh && lunch lineage_hotdogg-userdebug && mka bacon -j6"
}

target_hotdogg-syncd(){
  export devname="hotdogg"
  target_env
  export keys="test-keys"
  exec "repo sync"
  target_hotdogg-local
}

target_hotdogg-signed(){
  export buildtype="user"
  export devname="hotdogg"
  target_env
  export keys="release-keys"
  previous_target_files=$(get_latest_file "*hotdogg*signed-target_files*" "${out_dir}")
  target_name="PolarMod-Sakura-${signature}.${keys}"
  print_info 
  info "Updating sigining keys..."
  exec rm -rf ~/.android-certs
  exec cp -r .android-certs ~/
  success "Updated signing keys"
  info "Assumming everything is patched for bootloader being locked"
  info "Use 'patch' target if you would like to perform patching first" #TODO: patch target
  info "Starting build"
  exec ". build/envsetup.sh"
  exec "lunch lineage_hotdogg-${buildtype}"
  exec "mka target-files-package dist otatools -j6"
  success "Built target files package succesfully"
  info "Preparing enviroment for signing"
  exec rm -rf build/make/tools/framework
  exec rm -rf build/make/tools/lib64
  exec rm -rf build/make/tools/bin
  exec cp -r out/host/linux-x86/framework build/make/tools/framework   
  exec cp -r out/host/linux-x86/lib64 build/make/tools/lib64
  exec cp -r out/host/linux-x86/bin build/make/tools/bin
  info "Signing files"
  exec "./build/tools/releasetools/sign_target_files_apks -o -d ~/.android-certs $OUT/obj/PACKAGING/target_files_intermediates/*-target_files-*.zip ${out_dir}/${target_name}-signed-target_files.zip"
  success "Signed files succesfully"
  info "Building full OTA"
  exec "./build/tools/releasetools/ota_from_target_files --skip_compatibility_check -v -k ~/.android-certs/releasekey --block ${out_dir}/${target_name}-signed-target_files.zip ${out_dir}/${target_name}-OTA-signed.zip"
  success "Succesfully built full OTA!"
  #info "Building incremental OTA"
  #exec "./build/tools/releasetools/ota_from_target_files --skip_compatibility_check -v -k ~/.android-certs/releasekey --block -i ${previous_target_files} ${out_dir}/${target_name}-signed-target_files.zip ${out_dir}/${target_name}-INCREMENTAL-OTA-signed.zip"
}

target_z3tc-signed(){
  export buildtype="user"
  export devname="z3tc"
  target_env
  export keys="release-keys"
  previous_target_files=$(get_latest_file "*hotdogg*signed-target_files*" "${out_dir}")
  target_name="PolarMod-Sakura-${signature}.${keys}"
  print_info
  info "Updating sigining keys..."
  exec rm -rf ~/.android-certs
  exec cp -r .android-certs ~/
  success "Updated signing keys"
  info "Assumming everything is patched for bootloader being locked"
  info "Use 'patch' target if you would like to perform patching first" #TODO: patch target
  info "Starting build"
  exec ". build/envsetup.sh"
  exec "lunch lineage_z3tc-${buildtype}"
  exec "mka target-files-package otatools -j6"
  success "Built target files package succesfully"
  info "Signing files"
  exec "./build/tools/releasetools/sign_target_files_apks -o -d ~/.android-certs $OUT/obj/PACKAGING/target_files_intermediates/*-target_files-*.zip ${out_dir}/${target_name}-signed-target_files.zip"
  success "Signed files succesfully"
  info "Building full OTA"
  exec "./build/tools/releasetools/ota_from_target_files -v -k ~/.android-certs/releasekey --block ${out_dir}/${target_name}-signed-target_files.zip ${out_dir}/${target_name}-OTA-signed.zip"
  success "Succesfully built full OTA!"
  #info "Building incremental OTA"
  #exec "./build/tools/releasetools/ota_from_target_files -v -k ~/.android-certs/releasekey --block -i ${previous_target_files} ${out_dir}/${target_name}-signed-target_files.zip ${out_dir}/${target_name}-INCREMENTAL-OTA-signed.zip"
}


target_hotdogg-local-user-signed(){
  export buildtype="user"
  target_hotdogg-signed
}

target_clean(){
  exec rm -rf $OUTFILE_REAL
}

target_env(){
  export out_dir=$BUILD_OUT_DIR
  require_directory $out_dir
  export keys="test-keys"
  datetime=`date '+%Y%m%d_%H%M%S'`
  export signature="${devname}-${datetime}-${buildtype}"
  export BUILD_DISPLAY_ID="${devname}-${datetime}-${buildtype}-${BUILD_ID}"
}

target_hotdogg(){
  target_aarch
  target_patch-bootloader
  target_hotdogg-local-user-signed
}

target_all(){
  target_sync-initial
  target_patch
  target_z3tc
  target_hotdogg
}

## AUX functions

print_info(){
  info "---------------------------------------------------------------------------------"
  info "Target device:         ${devname}"
  info "Target name:           ${target_name}"
  info "Build type:            ${buildtype}"
  info "Out directory:         ${out_dir}"
  info "Keys:                  ${keys}"
  info "Display ID:            ${BUILD_DISPLAY_ID}"
  info "Previous target files: ${previous_target_files}"
  info "---------------------------------------------------------------------------------"
}

# $1 -- pattern to match
# $2 -- directory to search
get_latest_file(){
   echo `find $2 -name $1 -print0 | xargs -r -0 ls -1 -t | head -1`
}



